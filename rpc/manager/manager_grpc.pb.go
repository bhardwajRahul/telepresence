// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.9
// source: manager/manager.proto

// The "manager" package describes the server implemented by the
// in-cluster Manager, which is spoken to by the Agent (app-sidecar),
// the on-laptop Connector (user-daemon), and the on-laptop CLI.

package manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Manager_Version_FullMethodName                   = "/telepresence.manager.Manager/Version"
	Manager_GetAgentImageFQN_FullMethodName          = "/telepresence.manager.Manager/GetAgentImageFQN"
	Manager_GetAgentConfig_FullMethodName            = "/telepresence.manager.Manager/GetAgentConfig"
	Manager_GetLicense_FullMethodName                = "/telepresence.manager.Manager/GetLicense"
	Manager_CanConnectAmbassadorCloud_FullMethodName = "/telepresence.manager.Manager/CanConnectAmbassadorCloud"
	Manager_GetCloudConfig_FullMethodName            = "/telepresence.manager.Manager/GetCloudConfig"
	Manager_GetClientConfig_FullMethodName           = "/telepresence.manager.Manager/GetClientConfig"
	Manager_GetTelepresenceAPI_FullMethodName        = "/telepresence.manager.Manager/GetTelepresenceAPI"
	Manager_ArriveAsClient_FullMethodName            = "/telepresence.manager.Manager/ArriveAsClient"
	Manager_ArriveAsAgent_FullMethodName             = "/telepresence.manager.Manager/ArriveAsAgent"
	Manager_Remain_FullMethodName                    = "/telepresence.manager.Manager/Remain"
	Manager_Depart_FullMethodName                    = "/telepresence.manager.Manager/Depart"
	Manager_SetLogLevel_FullMethodName               = "/telepresence.manager.Manager/SetLogLevel"
	Manager_GetLogs_FullMethodName                   = "/telepresence.manager.Manager/GetLogs"
	Manager_WatchAgentPods_FullMethodName            = "/telepresence.manager.Manager/WatchAgentPods"
	Manager_WatchAgents_FullMethodName               = "/telepresence.manager.Manager/WatchAgents"
	Manager_WatchAgentsNS_FullMethodName             = "/telepresence.manager.Manager/WatchAgentsNS"
	Manager_WatchIntercepts_FullMethodName           = "/telepresence.manager.Manager/WatchIntercepts"
	Manager_WatchWorkloads_FullMethodName            = "/telepresence.manager.Manager/WatchWorkloads"
	Manager_WatchClusterInfo_FullMethodName          = "/telepresence.manager.Manager/WatchClusterInfo"
	Manager_EnsureAgent_FullMethodName               = "/telepresence.manager.Manager/EnsureAgent"
	Manager_PrepareIntercept_FullMethodName          = "/telepresence.manager.Manager/PrepareIntercept"
	Manager_CreateIntercept_FullMethodName           = "/telepresence.manager.Manager/CreateIntercept"
	Manager_RemoveIntercept_FullMethodName           = "/telepresence.manager.Manager/RemoveIntercept"
	Manager_UpdateIntercept_FullMethodName           = "/telepresence.manager.Manager/UpdateIntercept"
	Manager_GetIntercept_FullMethodName              = "/telepresence.manager.Manager/GetIntercept"
	Manager_ReviewIntercept_FullMethodName           = "/telepresence.manager.Manager/ReviewIntercept"
	Manager_GetKnownWorkloadKinds_FullMethodName     = "/telepresence.manager.Manager/GetKnownWorkloadKinds"
	Manager_LookupDNS_FullMethodName                 = "/telepresence.manager.Manager/LookupDNS"
	Manager_AgentLookupDNSResponse_FullMethodName    = "/telepresence.manager.Manager/AgentLookupDNSResponse"
	Manager_WatchLookupDNS_FullMethodName            = "/telepresence.manager.Manager/WatchLookupDNS"
	Manager_WatchLogLevel_FullMethodName             = "/telepresence.manager.Manager/WatchLogLevel"
	Manager_Tunnel_FullMethodName                    = "/telepresence.manager.Manager/Tunnel"
	Manager_ReportMetrics_FullMethodName             = "/telepresence.manager.Manager/ReportMetrics"
	Manager_WatchDial_FullMethodName                 = "/telepresence.manager.Manager/WatchDial"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	// Version returns the version information of the Manager.
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionInfo2, error)
	// GetAgentImageFQN returns fully qualified name of the image that is injected into intercepted pods.
	GetAgentImageFQN(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AgentImageFQN, error)
	// GetAgentConfig returns the agent configuration for a specific workload.
	GetAgentConfig(ctx context.Context, in *AgentConfigRequest, opts ...grpc.CallOption) (*AgentConfigResponse, error)
	// GetLicense returns the License information (the license itself and
	// domain that granted it) known to the manager.
	GetLicense(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*License, error)
	// CanConnectAmbassadorCloud returns whether or not the cluster is able to talk to
	// Ambassador Cloud
	CanConnectAmbassadorCloud(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AmbassadorCloudConnection, error)
	// GetCloudConfig returns the config (host + port) for Ambassador Cloud for use
	// by the agents.
	GetCloudConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AmbassadorCloudConfig, error)
	// GetClientConfig returns the config that connected clients should use for this manager.
	GetClientConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CLIConfig, error)
	// GetTelepresenceAPI returns information about the TelepresenceAPI server
	GetTelepresenceAPI(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TelepresenceAPIInfo, error)
	// ArriveAsClient establishes a session between a client and the Manager.
	ArriveAsClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*SessionInfo, error)
	// ArriveAsAgent establishes a session between an agent and the Manager.
	ArriveAsAgent(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*SessionInfo, error)
	// Remain indicates that the session is still valid, and potentially
	// updates the auth token for the session.
	Remain(ctx context.Context, in *RemainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Depart terminates a session.
	Depart(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetLogLevel will temporarily set the log-level for the traffic-manager and all
	// traffic-agents for a duration that is determined b the request.
	SetLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetLogs will acquire logs for the various Telepresence components in kubernetes
	// (pending the request) and return them to the caller
	// Deprecated: Will return an empty response
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*LogsResponse, error)
	// WatchAgentPods notifies a client of the set of known Agents from the client
	// connections namespace that the client can connect to when port-forwards are
	// allowed.
	WatchAgentPods(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AgentPodInfoSnapshot], error)
	// WatchAgents notifies a client of the set of known Agents.
	//
	// A session ID is required; if no session ID is given then the call
	// returns immediately, having not delivered any snapshots.
	WatchAgents(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AgentInfoSnapshot], error)
	// WatchAgentsNS is like WatchAgents but limited to a set of namespaces
	WatchAgentsNS(ctx context.Context, in *AgentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AgentInfoSnapshot], error)
	// WatchIntercepts notifies a client or agent of the set of intercepts
	// relevant to that client or agent.
	//
	// If a session ID is given, then only intercepts associated with
	// that session are watched.  If no session ID is given, then all
	// intercepts are watched.
	WatchIntercepts(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InterceptInfoSnapshot], error)
	// WatchWorkloads notifies a client of the set of Workloads from the client
	// connection's namespace.
	WatchWorkloads(ctx context.Context, in *WorkloadEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WorkloadEventsDelta], error)
	// WatchClusterInfo returns information needed when establishing
	// connectivity to the cluster.
	WatchClusterInfo(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ClusterInfo], error)
	// EnsureAgent ensures that an agent is injected to the pods of a workload and
	// returns the agents, sorted by pod name.
	EnsureAgent(ctx context.Context, in *EnsureAgentRequest, opts ...grpc.CallOption) (*AgentInfoSnapshot, error)
	// Request that the traffic-manager makes the preparations necessary to
	// create the given intercept.
	PrepareIntercept(ctx context.Context, in *CreateInterceptRequest, opts ...grpc.CallOption) (*PreparedIntercept, error)
	// CreateIntercept lets a client create an intercept.  It will be
	// created in the "WATING" disposition, and it will remain in that
	// state until the Agent (the app-sidecar) calls ReviewIntercept()
	// to transition it to the "ACTIVE" disposition (or one of the error
	// dispositions).
	CreateIntercept(ctx context.Context, in *CreateInterceptRequest, opts ...grpc.CallOption) (*InterceptInfo, error)
	// RemoveIntercept lets a client remove an intercept.
	RemoveIntercept(ctx context.Context, in *RemoveInterceptRequest2, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateIntercept(ctx context.Context, in *UpdateInterceptRequest, opts ...grpc.CallOption) (*InterceptInfo, error)
	// GetIntercept gets info from intercept name
	GetIntercept(ctx context.Context, in *GetInterceptRequest, opts ...grpc.CallOption) (*InterceptInfo, error)
	// ReviewIntercept lets an agent approve or reject an intercept by
	// changing the disposition from "WATING" to "ACTIVE" or to an
	// error, and setting a human-readable status message.
	ReviewIntercept(ctx context.Context, in *ReviewInterceptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetKnownWorkloadKinds returns the known workload kinds
	// that the manager can handle. This set may include Deployment, StatefulSet, ReplicaSet, Rollout (Argo Rollouts)
	// as configured in the manager's Helm values.
	GetKnownWorkloadKinds(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (*KnownWorkloadKinds, error)
	// LookupDNS performs a DNS lookup in the cluster. If the caller has intercepts
	// active, the lookup will be performed from the intercepted pods.
	LookupDNS(ctx context.Context, in *DNSRequest, opts ...grpc.CallOption) (*DNSResponse, error)
	// AgentLookupHostResponse lets an agent respond for lookup requests
	AgentLookupDNSResponse(ctx context.Context, in *DNSAgentResponse, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WatchLookupHost lets an agent receive lookup requests
	WatchLookupDNS(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DNSRequest], error)
	// WatchLogLevel lets an agent receive log-level updates
	WatchLogLevel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogLevelRequest], error)
	// A Tunnel represents one single connection where the client or
	// traffic-agent represents one end (the client-side) and the
	// traffic-manager represents the other (the server side). The first
	// message that a client sends when the tunnel is established is will
	// always contain the session ID, connection ID, and timeouts used by
	// the dialer endpoints.
	Tunnel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TunnelMessage, TunnelMessage], error)
	// ReportMetrics is used by a traffic-agent to report metrics for streams
	// established when clients connect directly to traffic-agents using port-forward.
	ReportMetrics(ctx context.Context, in *TunnelMetrics, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WatchDial makes it possible for the client side to receive
	// DialRequests from the traffic-manager. Requests are sent when an
	// intercepted traffic-agent creates a Tunnel that needs to be extended
	// to the Telepresence client on the workstation, or the other way around,
	// when that client creates a tunnel that needs to be extended to an
	// intercepted traffic agent. The receiver of the request dials a
	// connection and responds with a Tunnel. The manager then connects the
	// two tunnels.
	WatchDial(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DialRequest], error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionInfo2, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VersionInfo2)
	err := c.cc.Invoke(ctx, Manager_Version_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAgentImageFQN(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AgentImageFQN, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentImageFQN)
	err := c.cc.Invoke(ctx, Manager_GetAgentImageFQN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAgentConfig(ctx context.Context, in *AgentConfigRequest, opts ...grpc.CallOption) (*AgentConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentConfigResponse)
	err := c.cc.Invoke(ctx, Manager_GetAgentConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetLicense(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*License, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(License)
	err := c.cc.Invoke(ctx, Manager_GetLicense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CanConnectAmbassadorCloud(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AmbassadorCloudConnection, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmbassadorCloudConnection)
	err := c.cc.Invoke(ctx, Manager_CanConnectAmbassadorCloud_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCloudConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AmbassadorCloudConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AmbassadorCloudConfig)
	err := c.cc.Invoke(ctx, Manager_GetCloudConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetClientConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CLIConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CLIConfig)
	err := c.cc.Invoke(ctx, Manager_GetClientConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTelepresenceAPI(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TelepresenceAPIInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TelepresenceAPIInfo)
	err := c.cc.Invoke(ctx, Manager_GetTelepresenceAPI_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ArriveAsClient(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (*SessionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionInfo)
	err := c.cc.Invoke(ctx, Manager_ArriveAsClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ArriveAsAgent(ctx context.Context, in *AgentInfo, opts ...grpc.CallOption) (*SessionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionInfo)
	err := c.cc.Invoke(ctx, Manager_ArriveAsAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) Remain(ctx context.Context, in *RemainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_Remain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) Depart(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_Depart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) SetLogLevel(ctx context.Context, in *LogLevelRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_SetLogLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*LogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogsResponse)
	err := c.cc.Invoke(ctx, Manager_GetLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) WatchAgentPods(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AgentPodInfoSnapshot], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[0], Manager_WatchAgentPods_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SessionInfo, AgentPodInfoSnapshot]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchAgentPodsClient = grpc.ServerStreamingClient[AgentPodInfoSnapshot]

func (c *managerClient) WatchAgents(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AgentInfoSnapshot], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[1], Manager_WatchAgents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SessionInfo, AgentInfoSnapshot]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchAgentsClient = grpc.ServerStreamingClient[AgentInfoSnapshot]

func (c *managerClient) WatchAgentsNS(ctx context.Context, in *AgentsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AgentInfoSnapshot], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[2], Manager_WatchAgentsNS_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AgentsRequest, AgentInfoSnapshot]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchAgentsNSClient = grpc.ServerStreamingClient[AgentInfoSnapshot]

func (c *managerClient) WatchIntercepts(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[InterceptInfoSnapshot], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[3], Manager_WatchIntercepts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SessionInfo, InterceptInfoSnapshot]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchInterceptsClient = grpc.ServerStreamingClient[InterceptInfoSnapshot]

func (c *managerClient) WatchWorkloads(ctx context.Context, in *WorkloadEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WorkloadEventsDelta], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[4], Manager_WatchWorkloads_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WorkloadEventsRequest, WorkloadEventsDelta]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchWorkloadsClient = grpc.ServerStreamingClient[WorkloadEventsDelta]

func (c *managerClient) WatchClusterInfo(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ClusterInfo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[5], Manager_WatchClusterInfo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SessionInfo, ClusterInfo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchClusterInfoClient = grpc.ServerStreamingClient[ClusterInfo]

func (c *managerClient) EnsureAgent(ctx context.Context, in *EnsureAgentRequest, opts ...grpc.CallOption) (*AgentInfoSnapshot, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentInfoSnapshot)
	err := c.cc.Invoke(ctx, Manager_EnsureAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) PrepareIntercept(ctx context.Context, in *CreateInterceptRequest, opts ...grpc.CallOption) (*PreparedIntercept, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreparedIntercept)
	err := c.cc.Invoke(ctx, Manager_PrepareIntercept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateIntercept(ctx context.Context, in *CreateInterceptRequest, opts ...grpc.CallOption) (*InterceptInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InterceptInfo)
	err := c.cc.Invoke(ctx, Manager_CreateIntercept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) RemoveIntercept(ctx context.Context, in *RemoveInterceptRequest2, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_RemoveIntercept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateIntercept(ctx context.Context, in *UpdateInterceptRequest, opts ...grpc.CallOption) (*InterceptInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InterceptInfo)
	err := c.cc.Invoke(ctx, Manager_UpdateIntercept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetIntercept(ctx context.Context, in *GetInterceptRequest, opts ...grpc.CallOption) (*InterceptInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InterceptInfo)
	err := c.cc.Invoke(ctx, Manager_GetIntercept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ReviewIntercept(ctx context.Context, in *ReviewInterceptRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_ReviewIntercept_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetKnownWorkloadKinds(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (*KnownWorkloadKinds, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(KnownWorkloadKinds)
	err := c.cc.Invoke(ctx, Manager_GetKnownWorkloadKinds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) LookupDNS(ctx context.Context, in *DNSRequest, opts ...grpc.CallOption) (*DNSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DNSResponse)
	err := c.cc.Invoke(ctx, Manager_LookupDNS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) AgentLookupDNSResponse(ctx context.Context, in *DNSAgentResponse, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_AgentLookupDNSResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) WatchLookupDNS(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DNSRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[6], Manager_WatchLookupDNS_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SessionInfo, DNSRequest]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchLookupDNSClient = grpc.ServerStreamingClient[DNSRequest]

func (c *managerClient) WatchLogLevel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LogLevelRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[7], Manager_WatchLogLevel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, LogLevelRequest]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchLogLevelClient = grpc.ServerStreamingClient[LogLevelRequest]

func (c *managerClient) Tunnel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TunnelMessage, TunnelMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[8], Manager_Tunnel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TunnelMessage, TunnelMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_TunnelClient = grpc.BidiStreamingClient[TunnelMessage, TunnelMessage]

func (c *managerClient) ReportMetrics(ctx context.Context, in *TunnelMetrics, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Manager_ReportMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) WatchDial(ctx context.Context, in *SessionInfo, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DialRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Manager_ServiceDesc.Streams[9], Manager_WatchDial_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SessionInfo, DialRequest]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchDialClient = grpc.ServerStreamingClient[DialRequest]

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility.
type ManagerServer interface {
	// Version returns the version information of the Manager.
	Version(context.Context, *emptypb.Empty) (*VersionInfo2, error)
	// GetAgentImageFQN returns fully qualified name of the image that is injected into intercepted pods.
	GetAgentImageFQN(context.Context, *emptypb.Empty) (*AgentImageFQN, error)
	// GetAgentConfig returns the agent configuration for a specific workload.
	GetAgentConfig(context.Context, *AgentConfigRequest) (*AgentConfigResponse, error)
	// GetLicense returns the License information (the license itself and
	// domain that granted it) known to the manager.
	GetLicense(context.Context, *emptypb.Empty) (*License, error)
	// CanConnectAmbassadorCloud returns whether or not the cluster is able to talk to
	// Ambassador Cloud
	CanConnectAmbassadorCloud(context.Context, *emptypb.Empty) (*AmbassadorCloudConnection, error)
	// GetCloudConfig returns the config (host + port) for Ambassador Cloud for use
	// by the agents.
	GetCloudConfig(context.Context, *emptypb.Empty) (*AmbassadorCloudConfig, error)
	// GetClientConfig returns the config that connected clients should use for this manager.
	GetClientConfig(context.Context, *emptypb.Empty) (*CLIConfig, error)
	// GetTelepresenceAPI returns information about the TelepresenceAPI server
	GetTelepresenceAPI(context.Context, *emptypb.Empty) (*TelepresenceAPIInfo, error)
	// ArriveAsClient establishes a session between a client and the Manager.
	ArriveAsClient(context.Context, *ClientInfo) (*SessionInfo, error)
	// ArriveAsAgent establishes a session between an agent and the Manager.
	ArriveAsAgent(context.Context, *AgentInfo) (*SessionInfo, error)
	// Remain indicates that the session is still valid, and potentially
	// updates the auth token for the session.
	Remain(context.Context, *RemainRequest) (*emptypb.Empty, error)
	// Depart terminates a session.
	Depart(context.Context, *SessionInfo) (*emptypb.Empty, error)
	// SetLogLevel will temporarily set the log-level for the traffic-manager and all
	// traffic-agents for a duration that is determined b the request.
	SetLogLevel(context.Context, *LogLevelRequest) (*emptypb.Empty, error)
	// GetLogs will acquire logs for the various Telepresence components in kubernetes
	// (pending the request) and return them to the caller
	// Deprecated: Will return an empty response
	GetLogs(context.Context, *GetLogsRequest) (*LogsResponse, error)
	// WatchAgentPods notifies a client of the set of known Agents from the client
	// connections namespace that the client can connect to when port-forwards are
	// allowed.
	WatchAgentPods(*SessionInfo, grpc.ServerStreamingServer[AgentPodInfoSnapshot]) error
	// WatchAgents notifies a client of the set of known Agents.
	//
	// A session ID is required; if no session ID is given then the call
	// returns immediately, having not delivered any snapshots.
	WatchAgents(*SessionInfo, grpc.ServerStreamingServer[AgentInfoSnapshot]) error
	// WatchAgentsNS is like WatchAgents but limited to a set of namespaces
	WatchAgentsNS(*AgentsRequest, grpc.ServerStreamingServer[AgentInfoSnapshot]) error
	// WatchIntercepts notifies a client or agent of the set of intercepts
	// relevant to that client or agent.
	//
	// If a session ID is given, then only intercepts associated with
	// that session are watched.  If no session ID is given, then all
	// intercepts are watched.
	WatchIntercepts(*SessionInfo, grpc.ServerStreamingServer[InterceptInfoSnapshot]) error
	// WatchWorkloads notifies a client of the set of Workloads from the client
	// connection's namespace.
	WatchWorkloads(*WorkloadEventsRequest, grpc.ServerStreamingServer[WorkloadEventsDelta]) error
	// WatchClusterInfo returns information needed when establishing
	// connectivity to the cluster.
	WatchClusterInfo(*SessionInfo, grpc.ServerStreamingServer[ClusterInfo]) error
	// EnsureAgent ensures that an agent is injected to the pods of a workload and
	// returns the agents, sorted by pod name.
	EnsureAgent(context.Context, *EnsureAgentRequest) (*AgentInfoSnapshot, error)
	// Request that the traffic-manager makes the preparations necessary to
	// create the given intercept.
	PrepareIntercept(context.Context, *CreateInterceptRequest) (*PreparedIntercept, error)
	// CreateIntercept lets a client create an intercept.  It will be
	// created in the "WATING" disposition, and it will remain in that
	// state until the Agent (the app-sidecar) calls ReviewIntercept()
	// to transition it to the "ACTIVE" disposition (or one of the error
	// dispositions).
	CreateIntercept(context.Context, *CreateInterceptRequest) (*InterceptInfo, error)
	// RemoveIntercept lets a client remove an intercept.
	RemoveIntercept(context.Context, *RemoveInterceptRequest2) (*emptypb.Empty, error)
	UpdateIntercept(context.Context, *UpdateInterceptRequest) (*InterceptInfo, error)
	// GetIntercept gets info from intercept name
	GetIntercept(context.Context, *GetInterceptRequest) (*InterceptInfo, error)
	// ReviewIntercept lets an agent approve or reject an intercept by
	// changing the disposition from "WATING" to "ACTIVE" or to an
	// error, and setting a human-readable status message.
	ReviewIntercept(context.Context, *ReviewInterceptRequest) (*emptypb.Empty, error)
	// GetKnownWorkloadKinds returns the known workload kinds
	// that the manager can handle. This set may include Deployment, StatefulSet, ReplicaSet, Rollout (Argo Rollouts)
	// as configured in the manager's Helm values.
	GetKnownWorkloadKinds(context.Context, *SessionInfo) (*KnownWorkloadKinds, error)
	// LookupDNS performs a DNS lookup in the cluster. If the caller has intercepts
	// active, the lookup will be performed from the intercepted pods.
	LookupDNS(context.Context, *DNSRequest) (*DNSResponse, error)
	// AgentLookupHostResponse lets an agent respond for lookup requests
	AgentLookupDNSResponse(context.Context, *DNSAgentResponse) (*emptypb.Empty, error)
	// WatchLookupHost lets an agent receive lookup requests
	WatchLookupDNS(*SessionInfo, grpc.ServerStreamingServer[DNSRequest]) error
	// WatchLogLevel lets an agent receive log-level updates
	WatchLogLevel(*emptypb.Empty, grpc.ServerStreamingServer[LogLevelRequest]) error
	// A Tunnel represents one single connection where the client or
	// traffic-agent represents one end (the client-side) and the
	// traffic-manager represents the other (the server side). The first
	// message that a client sends when the tunnel is established is will
	// always contain the session ID, connection ID, and timeouts used by
	// the dialer endpoints.
	Tunnel(grpc.BidiStreamingServer[TunnelMessage, TunnelMessage]) error
	// ReportMetrics is used by a traffic-agent to report metrics for streams
	// established when clients connect directly to traffic-agents using port-forward.
	ReportMetrics(context.Context, *TunnelMetrics) (*emptypb.Empty, error)
	// WatchDial makes it possible for the client side to receive
	// DialRequests from the traffic-manager. Requests are sent when an
	// intercepted traffic-agent creates a Tunnel that needs to be extended
	// to the Telepresence client on the workstation, or the other way around,
	// when that client creates a tunnel that needs to be extended to an
	// intercepted traffic agent. The receiver of the request dials a
	// connection and responds with a Tunnel. The manager then connects the
	// two tunnels.
	WatchDial(*SessionInfo, grpc.ServerStreamingServer[DialRequest]) error
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedManagerServer struct{}

func (UnimplementedManagerServer) Version(context.Context, *emptypb.Empty) (*VersionInfo2, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedManagerServer) GetAgentImageFQN(context.Context, *emptypb.Empty) (*AgentImageFQN, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentImageFQN not implemented")
}
func (UnimplementedManagerServer) GetAgentConfig(context.Context, *AgentConfigRequest) (*AgentConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentConfig not implemented")
}
func (UnimplementedManagerServer) GetLicense(context.Context, *emptypb.Empty) (*License, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (UnimplementedManagerServer) CanConnectAmbassadorCloud(context.Context, *emptypb.Empty) (*AmbassadorCloudConnection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CanConnectAmbassadorCloud not implemented")
}
func (UnimplementedManagerServer) GetCloudConfig(context.Context, *emptypb.Empty) (*AmbassadorCloudConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudConfig not implemented")
}
func (UnimplementedManagerServer) GetClientConfig(context.Context, *emptypb.Empty) (*CLIConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientConfig not implemented")
}
func (UnimplementedManagerServer) GetTelepresenceAPI(context.Context, *emptypb.Empty) (*TelepresenceAPIInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTelepresenceAPI not implemented")
}
func (UnimplementedManagerServer) ArriveAsClient(context.Context, *ClientInfo) (*SessionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArriveAsClient not implemented")
}
func (UnimplementedManagerServer) ArriveAsAgent(context.Context, *AgentInfo) (*SessionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArriveAsAgent not implemented")
}
func (UnimplementedManagerServer) Remain(context.Context, *RemainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remain not implemented")
}
func (UnimplementedManagerServer) Depart(context.Context, *SessionInfo) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Depart not implemented")
}
func (UnimplementedManagerServer) SetLogLevel(context.Context, *LogLevelRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (UnimplementedManagerServer) GetLogs(context.Context, *GetLogsRequest) (*LogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedManagerServer) WatchAgentPods(*SessionInfo, grpc.ServerStreamingServer[AgentPodInfoSnapshot]) error {
	return status.Errorf(codes.Unimplemented, "method WatchAgentPods not implemented")
}
func (UnimplementedManagerServer) WatchAgents(*SessionInfo, grpc.ServerStreamingServer[AgentInfoSnapshot]) error {
	return status.Errorf(codes.Unimplemented, "method WatchAgents not implemented")
}
func (UnimplementedManagerServer) WatchAgentsNS(*AgentsRequest, grpc.ServerStreamingServer[AgentInfoSnapshot]) error {
	return status.Errorf(codes.Unimplemented, "method WatchAgentsNS not implemented")
}
func (UnimplementedManagerServer) WatchIntercepts(*SessionInfo, grpc.ServerStreamingServer[InterceptInfoSnapshot]) error {
	return status.Errorf(codes.Unimplemented, "method WatchIntercepts not implemented")
}
func (UnimplementedManagerServer) WatchWorkloads(*WorkloadEventsRequest, grpc.ServerStreamingServer[WorkloadEventsDelta]) error {
	return status.Errorf(codes.Unimplemented, "method WatchWorkloads not implemented")
}
func (UnimplementedManagerServer) WatchClusterInfo(*SessionInfo, grpc.ServerStreamingServer[ClusterInfo]) error {
	return status.Errorf(codes.Unimplemented, "method WatchClusterInfo not implemented")
}
func (UnimplementedManagerServer) EnsureAgent(context.Context, *EnsureAgentRequest) (*AgentInfoSnapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnsureAgent not implemented")
}
func (UnimplementedManagerServer) PrepareIntercept(context.Context, *CreateInterceptRequest) (*PreparedIntercept, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareIntercept not implemented")
}
func (UnimplementedManagerServer) CreateIntercept(context.Context, *CreateInterceptRequest) (*InterceptInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIntercept not implemented")
}
func (UnimplementedManagerServer) RemoveIntercept(context.Context, *RemoveInterceptRequest2) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveIntercept not implemented")
}
func (UnimplementedManagerServer) UpdateIntercept(context.Context, *UpdateInterceptRequest) (*InterceptInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIntercept not implemented")
}
func (UnimplementedManagerServer) GetIntercept(context.Context, *GetInterceptRequest) (*InterceptInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIntercept not implemented")
}
func (UnimplementedManagerServer) ReviewIntercept(context.Context, *ReviewInterceptRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewIntercept not implemented")
}
func (UnimplementedManagerServer) GetKnownWorkloadKinds(context.Context, *SessionInfo) (*KnownWorkloadKinds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKnownWorkloadKinds not implemented")
}
func (UnimplementedManagerServer) LookupDNS(context.Context, *DNSRequest) (*DNSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupDNS not implemented")
}
func (UnimplementedManagerServer) AgentLookupDNSResponse(context.Context, *DNSAgentResponse) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgentLookupDNSResponse not implemented")
}
func (UnimplementedManagerServer) WatchLookupDNS(*SessionInfo, grpc.ServerStreamingServer[DNSRequest]) error {
	return status.Errorf(codes.Unimplemented, "method WatchLookupDNS not implemented")
}
func (UnimplementedManagerServer) WatchLogLevel(*emptypb.Empty, grpc.ServerStreamingServer[LogLevelRequest]) error {
	return status.Errorf(codes.Unimplemented, "method WatchLogLevel not implemented")
}
func (UnimplementedManagerServer) Tunnel(grpc.BidiStreamingServer[TunnelMessage, TunnelMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Tunnel not implemented")
}
func (UnimplementedManagerServer) ReportMetrics(context.Context, *TunnelMetrics) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportMetrics not implemented")
}
func (UnimplementedManagerServer) WatchDial(*SessionInfo, grpc.ServerStreamingServer[DialRequest]) error {
	return status.Errorf(codes.Unimplemented, "method WatchDial not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}
func (UnimplementedManagerServer) testEmbeddedByValue()                 {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	// If the following call pancis, it indicates UnimplementedManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAgentImageFQN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAgentImageFQN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetAgentImageFQN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAgentImageFQN(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAgentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAgentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetAgentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAgentConfig(ctx, req.(*AgentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetLicense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetLicense(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CanConnectAmbassadorCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CanConnectAmbassadorCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CanConnectAmbassadorCloud_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CanConnectAmbassadorCloud(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCloudConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCloudConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetCloudConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCloudConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetClientConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetClientConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetClientConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetClientConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTelepresenceAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTelepresenceAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetTelepresenceAPI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTelepresenceAPI(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ArriveAsClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ArriveAsClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ArriveAsClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ArriveAsClient(ctx, req.(*ClientInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ArriveAsAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ArriveAsAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ArriveAsAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ArriveAsAgent(ctx, req.(*AgentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_Remain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Remain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_Remain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Remain(ctx, req.(*RemainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_Depart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Depart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_Depart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Depart(ctx, req.(*SessionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_SetLogLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).SetLogLevel(ctx, req.(*LogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_WatchAgentPods_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SessionInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).WatchAgentPods(m, &grpc.GenericServerStream[SessionInfo, AgentPodInfoSnapshot]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchAgentPodsServer = grpc.ServerStreamingServer[AgentPodInfoSnapshot]

func _Manager_WatchAgents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SessionInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).WatchAgents(m, &grpc.GenericServerStream[SessionInfo, AgentInfoSnapshot]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchAgentsServer = grpc.ServerStreamingServer[AgentInfoSnapshot]

func _Manager_WatchAgentsNS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AgentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).WatchAgentsNS(m, &grpc.GenericServerStream[AgentsRequest, AgentInfoSnapshot]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchAgentsNSServer = grpc.ServerStreamingServer[AgentInfoSnapshot]

func _Manager_WatchIntercepts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SessionInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).WatchIntercepts(m, &grpc.GenericServerStream[SessionInfo, InterceptInfoSnapshot]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchInterceptsServer = grpc.ServerStreamingServer[InterceptInfoSnapshot]

func _Manager_WatchWorkloads_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkloadEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).WatchWorkloads(m, &grpc.GenericServerStream[WorkloadEventsRequest, WorkloadEventsDelta]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchWorkloadsServer = grpc.ServerStreamingServer[WorkloadEventsDelta]

func _Manager_WatchClusterInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SessionInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).WatchClusterInfo(m, &grpc.GenericServerStream[SessionInfo, ClusterInfo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchClusterInfoServer = grpc.ServerStreamingServer[ClusterInfo]

func _Manager_EnsureAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnsureAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).EnsureAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_EnsureAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).EnsureAgent(ctx, req.(*EnsureAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_PrepareIntercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).PrepareIntercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_PrepareIntercept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).PrepareIntercept(ctx, req.(*CreateInterceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateIntercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInterceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateIntercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateIntercept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateIntercept(ctx, req.(*CreateInterceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_RemoveIntercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveInterceptRequest2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).RemoveIntercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_RemoveIntercept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).RemoveIntercept(ctx, req.(*RemoveInterceptRequest2))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateIntercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInterceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateIntercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateIntercept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateIntercept(ctx, req.(*UpdateInterceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetIntercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetIntercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetIntercept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetIntercept(ctx, req.(*GetInterceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ReviewIntercept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewInterceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ReviewIntercept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ReviewIntercept_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ReviewIntercept(ctx, req.(*ReviewInterceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetKnownWorkloadKinds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetKnownWorkloadKinds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetKnownWorkloadKinds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetKnownWorkloadKinds(ctx, req.(*SessionInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_LookupDNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).LookupDNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_LookupDNS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).LookupDNS(ctx, req.(*DNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_AgentLookupDNSResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DNSAgentResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).AgentLookupDNSResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_AgentLookupDNSResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).AgentLookupDNSResponse(ctx, req.(*DNSAgentResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_WatchLookupDNS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SessionInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).WatchLookupDNS(m, &grpc.GenericServerStream[SessionInfo, DNSRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchLookupDNSServer = grpc.ServerStreamingServer[DNSRequest]

func _Manager_WatchLogLevel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).WatchLogLevel(m, &grpc.GenericServerStream[emptypb.Empty, LogLevelRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchLogLevelServer = grpc.ServerStreamingServer[LogLevelRequest]

func _Manager_Tunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManagerServer).Tunnel(&grpc.GenericServerStream[TunnelMessage, TunnelMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_TunnelServer = grpc.BidiStreamingServer[TunnelMessage, TunnelMessage]

func _Manager_ReportMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TunnelMetrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ReportMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ReportMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ReportMetrics(ctx, req.(*TunnelMetrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_WatchDial_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SessionInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagerServer).WatchDial(m, &grpc.GenericServerStream[SessionInfo, DialRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Manager_WatchDialServer = grpc.ServerStreamingServer[DialRequest]

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telepresence.manager.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Manager_Version_Handler,
		},
		{
			MethodName: "GetAgentImageFQN",
			Handler:    _Manager_GetAgentImageFQN_Handler,
		},
		{
			MethodName: "GetAgentConfig",
			Handler:    _Manager_GetAgentConfig_Handler,
		},
		{
			MethodName: "GetLicense",
			Handler:    _Manager_GetLicense_Handler,
		},
		{
			MethodName: "CanConnectAmbassadorCloud",
			Handler:    _Manager_CanConnectAmbassadorCloud_Handler,
		},
		{
			MethodName: "GetCloudConfig",
			Handler:    _Manager_GetCloudConfig_Handler,
		},
		{
			MethodName: "GetClientConfig",
			Handler:    _Manager_GetClientConfig_Handler,
		},
		{
			MethodName: "GetTelepresenceAPI",
			Handler:    _Manager_GetTelepresenceAPI_Handler,
		},
		{
			MethodName: "ArriveAsClient",
			Handler:    _Manager_ArriveAsClient_Handler,
		},
		{
			MethodName: "ArriveAsAgent",
			Handler:    _Manager_ArriveAsAgent_Handler,
		},
		{
			MethodName: "Remain",
			Handler:    _Manager_Remain_Handler,
		},
		{
			MethodName: "Depart",
			Handler:    _Manager_Depart_Handler,
		},
		{
			MethodName: "SetLogLevel",
			Handler:    _Manager_SetLogLevel_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _Manager_GetLogs_Handler,
		},
		{
			MethodName: "EnsureAgent",
			Handler:    _Manager_EnsureAgent_Handler,
		},
		{
			MethodName: "PrepareIntercept",
			Handler:    _Manager_PrepareIntercept_Handler,
		},
		{
			MethodName: "CreateIntercept",
			Handler:    _Manager_CreateIntercept_Handler,
		},
		{
			MethodName: "RemoveIntercept",
			Handler:    _Manager_RemoveIntercept_Handler,
		},
		{
			MethodName: "UpdateIntercept",
			Handler:    _Manager_UpdateIntercept_Handler,
		},
		{
			MethodName: "GetIntercept",
			Handler:    _Manager_GetIntercept_Handler,
		},
		{
			MethodName: "ReviewIntercept",
			Handler:    _Manager_ReviewIntercept_Handler,
		},
		{
			MethodName: "GetKnownWorkloadKinds",
			Handler:    _Manager_GetKnownWorkloadKinds_Handler,
		},
		{
			MethodName: "LookupDNS",
			Handler:    _Manager_LookupDNS_Handler,
		},
		{
			MethodName: "AgentLookupDNSResponse",
			Handler:    _Manager_AgentLookupDNSResponse_Handler,
		},
		{
			MethodName: "ReportMetrics",
			Handler:    _Manager_ReportMetrics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchAgentPods",
			Handler:       _Manager_WatchAgentPods_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchAgents",
			Handler:       _Manager_WatchAgents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchAgentsNS",
			Handler:       _Manager_WatchAgentsNS_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchIntercepts",
			Handler:       _Manager_WatchIntercepts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchWorkloads",
			Handler:       _Manager_WatchWorkloads_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchClusterInfo",
			Handler:       _Manager_WatchClusterInfo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchLookupDNS",
			Handler:       _Manager_WatchLookupDNS_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchLogLevel",
			Handler:       _Manager_WatchLogLevel_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Tunnel",
			Handler:       _Manager_Tunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WatchDial",
			Handler:       _Manager_WatchDial_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "manager/manager.proto",
}
